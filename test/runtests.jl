using FactCheck

cd("../src")

include("../src/core.jl")
# exposed as property
nv_list = SQLite.query(nvdb, "select NV from nv_summary") |> schema2arr |> nable2arr |> vec |> sort
# exposed as property
ot_list = ["measure"; "mean"; SQLite.query(nvdb, "select path from clearance_val") |> schema2arr |> nable2arr |> vec ]
# exposed as property
year1_ctx = "2016"
# exposed as property
year2_ctx = "2026"

# get data
include("../src/getdata.jl")
# decay
include("../src/decay.jl")
# calc nv
include("../src/calcnv.jl")
# get relevant nuclides and constraints
include("../src/constraints.jl")
# test NV
include("../src/testnv.jl")
# clearance
include("../src/clearance.jl")

years = ["2016", "2017", "2018"]
rel_nuclides3 = [Constraint("Co60", "NONE", 0, 0)
                 Constraint("Cs137", ">=", 5, 0)
                 Constraint("Ni63", "==", 10, 0)
                 Constraint("Am241", "<=", 0.3, 100)]
push!(genSettings.co60eq, "is")
genSettings.target = "mean"

facts("basics") do
  @fact Date(2000, 1, 1):Dates.Year(1):Date(2003, 1, 1) |> collect |> travec --> [Date(2000,1,1) Date(2001,1,1) Date(2002,1,1) Date(2003,1,1)]
  @fact [2000, 2001] |> arr2str --> "2000, 2001"
  @fact ["Co60", "Cs137"] |> arr2str --> "Co60, Cs137"
  @fact get_years() --> collect(2016:2026)
  @fact get_sample_info("date")[1] --> "20.02.1995"
  @fact get_sample_info("s_id")[1] --> 11

  global nuclides = [Nuclide("Co60", [50, 33, 66]), Nuclide("Cs137", [50, 67, 34])]
  @fact sanity_check() --> true
  global nuclides = [Nuclide("Co60", [50, 34, 65]), Nuclide("Cs137", [50, 67, 34])]
  @fact  sanity_check() --> false
end

facts("calculations (with optimization target 'mean')") do
  @fact decay_correction(nvdb, ["Co60", "Pu241", "Am241"], 2016)[11,:].array --> [1606.5139600660889, 17.169121631227156, 14.606756459799302]
  @fact decay_correction(nvdb, ["Co60", "Pu241", "Am241"], [2016, 2017])[11,:,2017] --> [1408.0831273190711, 16.360099584555364, 14.610215241778892]

  @fact nuclide_parts(decay_correction(nvdb, nuclide_names, [2016, 2017] ) )[11,  ["Co60", "Pu241", "Am241"], 2016].array --> roughly([0.65704,0.00702191,0.00597394], atol=1E-6)
  @fact nuclide_parts(decay_correction(nvdb, nuclide_names, 2017 ) )[11,  ["Co60", "Pu241", "Am241"]].array --> roughly([0.630349,0.00732384,0.00654047], atol=1E-6)

  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, get_years() ) ) )[1][1] --> 1.191405847123472
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, get_years() ) ) )[2][1] --> 0.6683477256399165
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, get_years() ) ) )[3][2,1] --> 2.5
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, get_years() ) ) )[4][1].value --> 0.4585

  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, [2016] ) ), [2016] )[1][1] --> 1.191405847123472
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, [2016] ) ), [2016] )[2][1] --> 0.6683477256399165
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, [2016] ) ), [2016] )[3][2,1] --> 2.5
  @fact calc_factors(nuclide_parts(decay_correction(nvdb, nuclide_names, [2016] ) ), [2016] )[4][1].value --> 0.4585

  @fact get_nv()[:,2016].array --> [84.81,5.0,10.0,0.19]
  @fact start_nv_calc() --> nothing
  @fact nv_NamedArray[:,2017].array --> [84.8,5.0,10.0,0.2]

  @fact clearance_gui() --> nothing
  @fact clearance_year[:,2016].array --> roughly([1.08921,0.116018,0.104312,0.0342838,0.462032,6.74491,2.31321,7.80891,2.25921,3.46818,0.665258], atol=1E-5)
end

facts("variables") do
  @fact convert(Array{String,1}, SQLite.query(nvdb, "pragma table_info(halflife)")[:,2])[3] --> "Co60"
  @fact convert(Array{String,1}, SQLite.query(nvdb, "pragma table_info(halflife)")[:,2]) --> ["Mn54","Co57","Co60","Zn65","Nb94","Ru106","Ag108m","Ag110m","Sb125","Cs134","Cs137","Ba133","Ce144","Eu152","Eu154","Eu155","Fe55","Ni63","Sr90","U234","U238","U235","Pu239Pu240","Pu238","Pu241","Am241","Cm242","Cm244","Ni59","H3","U233"]
  @fact nable2arr(read_db(nvdb, "efficiency")[:,["Mn54", "Co60"]].array)[:,1] --> roughly([0.4585,2.30769,1.0], atol=1E-5)
end

facts("types") do
    @fact SQLite.query(nvdb, "pragma table_info(halflife)") |> typeof --> DataFrame
    @fact SQLite.query(nvdb, "select Co60 from halflife") |> schema2arr |> typeof --> Array{Nullable{Float64},2}
    @fact SQLite.query(nvdb, "select Co60 from halflife")[1] |> schema2arr |> typeof --> Array{Float64,1}
    @fact [Nuclide("Co60", rand(length(years)))] |> ListModel2NamedArray |> typeof --> NamedArrays.NamedArray{Float64,2,Array{Float64,2},Tuple{DataStructures.OrderedDict{String,Int64},DataStructures.OrderedDict{Int64,Int64}}}
end

facts("copy2clipboard") do
  @fact copy2clipboard_nv() --> "\t2016\t2017\t2018\t2019\t2020\t2021\t2022\t2023\t2024\t2025\t\nCo60\t84,81\t84,8\t84,79\t84,78\t84,77\t84,76\t84,76\t84,75\t84,74\t84,73\t\nCs137\t5,0\t5,0\t5,0\t5,0\t5,0\t5,0\t5,0\t5,0\t5,0\t5,0\t\nNi63\t10,0\t10,0\t10,0\t10,0\t10,0\t10,0\t10,0\t10,0\t10,0\t10,0\t\nAm241\t0,19\t0,2\t0,21\t0,22\t0,23\t0,24\t0,24\t0,25\t0,26\t0,27\t\n"

  @fact copy2clipboard_clearance() --> "\t2016\t2017\t2018\t2019\t2020\t2021\t2022\t2023\t2024\t2025\t\nOF / Bq/cm²\t1,0892059688487092\t1,0881392818280742\t1,0870746820306556\t1,0860121633362294\t1,084951719648476\t1,0838933448948622\t1,0838933448948622\t1,0828370330265296\t1,0817827780181741\t1,0807305738679347\t\n1a / Bq/g\t0,11601825353855673\t0,11600479486485442\t0,11599133931333126\t0,11597788688290102\t0,11596443757247778\t0,11595099138097632\t0,11595099138097632\t0,11593754830731179\t0,11592410835039994\t0,11591067150915695\t\n2a / Bq/g\t0,10431154381084841\t0,10430187279807157\t0,10429220357838138\t0,1042825361512792\t0,10427287051626657\t0,10426320667284522\t0,10426320667284522\t0,10425354462051711\t0,10424388435878429\t0,10423422588714908\t\n3a / Bq/g\t0,034283755213987764\t0,034285714285714274\t0,034287673581347496\t0,03428963310092581\t0,03429159284448762\t0,034293552812071325\t0,034293552812071325\t0,03429551300371535\t0,034297473419458095\t0,03429943405933802\t\n4a / Bq/cm²\t0,46203248088340604\t0,4618724308346035\t0,46171249163146105\t0,46155266315886645\t0,46139294530186636\t0,46123333794566673\t0,46123333794566673\t0,46107384097563225\t0,46091445427728617\t0,4607551777363098\t\n1b / Bq/g\t6,7449075947659525\t6,741118576275757\t6,7373338124326265\t6,733553296074338\t6,729777020054736\t6,726004977243683\t6,726004977243683\t6,7222371605270235\t6,7184735628065315\t6,714714176999866\t\n2b / Bq/g\t2,313208420078649\t2,3129409043598934\t2,3126734505087883\t2,3124060585038735\t2,3121387283236996\t2,311871459946827\t2,311871459946827\t2,311604253351826\t2,311337108517278\t2,31107002542177\t\n3b / Bq/g\t7,808912199937901\t7,803688915231501\t7,7984726134352815\t7,793263280555622\t7,788060902636259\t7,782865465758171\t7,782865465758171\t7,777676956039459\t7,7724953596352115\t7,767320662737389\t\n4b / Bq/g\t2,2592062655320433\t2,2589510937088213\t2,2586959795211565\t2,258440922949524\t2,2581859239744078\t2,257930982576299\t2,257930982576299\t2,2576760987357014\t2,2574212724331244\t2,2571665036490858\t\n5b / Bq/cm²\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,4681780215778475\t3,468178021577848\t3,4681780215778475\t\n6b_2c / Bq/g\t0,6652577984845426\t0,6651840453389445\t0,665110308544672\t0,6650365880962884\t0,6649628839883586\t0,6648891962154506\t0,6648891962154506\t0,6648155247721343\t0,6647418696529825\t0,6646682308525699\t\n"

# small round error on CI system
  @pending copy2clipboard_decay("2016", false) --> "2016\n\tMin\tMittel\tMax\t11\t12\t13\t14\t16\t17\t18\t19\t21\t23\t22\t24\t25\t27\t28\t26\t29\t30\t32\t33\t34\t35\t36\t37\t38\t40\t42\t39\t43\t44\t45\t46\t47\t51\t52\t\nMn54\t0.0\t2.388633131946623e-7\t8.2708643206757e-7\t8,2708643206757e-7\t6,909325123701203e-7\t5,70869790025537e-8\t5,568814065584113e-8\t8,056188816849495e-8\t1,319662489081193e-7\t6,065611619427354e-8\t3,808562768889905e-8\t2,61839388629786e-7\t3,056961875653054e-7\t1,9483682284477497e-7\t6,303112685528935e-7\t3,894352033305025e-7\t3,7693911556908894e-7\t1,3429862423897657e-7\t3,0126353866181364e-7\t4,2968709800962286e-7\t1,7100191757218473e-7\t4,497057661367795e-7\t3,0251972477632803e-7\t2,4265520389295997e-7\t2,2116336535124398e-7\t4,616389618901903e-7\t0,0\t8,841146793969452e-8\t4,0940077893937664e-8\t5,609975477935012e-8\t4,133743517043905e-8\t5,4046648913277794e-8\t1,6401704236459463e-8\t0,0\t4,7248489385448305e-7\t2,533547183814171e-7\t4,854408796914109e-7\t3,6642248874388794e-8\t\nCo57\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nCo60\t2.1712617295213237\t19.288605626538626\t65.7039947184108\t65,7039947184108\t54,85363296361967\t8,743196180071404\t7,805012890492373\t16,26317518818438\t9,025811675817362\t10,02366705999635\t8,991205022149124\t16,04157037413482\t15,694871002024074\t14,357329128228486\t26,357150253702923\t11,985037669518078\t17,406881863554762\t11,93693640926884\t13,25995642815342\t32,20598700567066\t17,388087963152916\t31,36808301094612\t16,31254413020229\t17,27595849828366\t18,530807744671566\t16,28118769947899\t26,287036042423907\t13,225805168247243\t10,30710666728621\t10,996991353820974\t9,323924958473519\t7,800475449912893\t10,94845950399595\t33,278718719096446\t43,9202348959487\t24,24798186326247\t24,781115697129195\t2,1712617295213237\t\nZn65\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nNb94\t0.0\t0.22427168981830106\t1.839100909120538\t1,839100909120538\t1,069320419926635\t0,15524724812404422\t0,10409539048767895\t0,0\t0,33262328546846753\t0,23431362883861193\t0,09557020851174373\t0,3685179721703142\t0,0\t0,08443207067693764\t0,0\t0,0\t0,0\t0,21048110168782685\t0,0\t0,2132665891364794\t0,18307760871198983\t0,13170219762901547\t0,27086999000756157\t0,0\t0,0\t0,0\t0,0\t0,0\t0,20989003972044176\t0,22321231307593187\t0,21406787469272223\t0,14466552578879588\t0,23048600381842047\t0,0\t1,534568766046381\t0,0\t0,0\t0,0\t\nRu106\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nAg108m\t0.0\t0.8066263344372092\t8.717208520095209\t0,0\t0,0\t0,0\t0,0\t0,30110308067677716\t1,8808612677506948\t8,717208520095209\t0,967085494800569\t0,0\t0,0\t0,0\t0,0\t0,27881005416428073\t0,4907788844072151\t0,0\t3,5248281398928967\t0,47607981582615966\t0,18863096257685236\t0,1306713432064688\t0,30233010116365133\t0,0\t0,0\t0,0\t0,0\t0,4575001832617305\t4,927711536692208\t0,5976717887600864\t1,605423610856217\t0,7491876721852937\t0,2881178550489489\t0,0\t0,0\t2,3479213939370633\t0,0\t0,0\t\nAg110m\t0.0\t1.3733032345301342e-9\t1.5523766539024605e-8\t1,0831818349912238e-9\t1,1260899240089993e-9\t1,1148193530012282e-10\t6,037512377091405e-11\t5,585649706503931e-10\t6,448833883736407e-9\t1,5523766539024605e-8\t4,347473876790289e-9\t0,0\t0,0\t0,0\t0,0\t1,7203127002835723e-9\t1,8208508033102397e-9\t0,0\t7,74424063322995e-9\t1,0890899140771211e-9\t1,9595642392518313e-10\t3,2320464171900004e-10\t2,5586058879180033e-10\t0,0\t0,0\t0,0\t0,0\t9,140951276712022e-10\t0,0\t0,0\t2,4764078248747134e-9\t4,915796795786879e-10\t0,0\t0,0\t0,0\t0,0\t1,7742467828202734e-9\t0,0\t\nSb125\t0.0\t0.0024547354172914345\t0.03083590812158332\t0,03083590812158332\t0,015044967023125657\t0,001422464987735824\t0,0013206213872327833\t0,002839494579519111\t0,005938650508464121\t0,0\t0,002733839614634124\t0,0\t0,0\t0,00226582786971186\t0,0\t0,0\t0,0\t0,0\t0,005794151460935895\t0,0\t0,0022769253673528608\t0,0021030757062601253\t0,002094166996222414\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,011245645982422125\t0,0\t0,0\t\nCs134\t0.0\t0.002247367806211674\t0.013210400015827373\t0,0\t0,0\t0,0\t2,5629693344703264e-5\t0,0003752955117512638\t0,004209931125631175\t0,00038037772741196724\t0,001380934677439148\t0,0015914616939817698\t0,0010701906664969097\t0,0020559674222087633\t0,00850515318443033\t0,0029253466511221927\t0,009909666872535977\t0,0\t0,0001913625461047716\t0,0\t0,0\t0,0\t0,0\t0,0\t0,003735202348221985\t0,0\t0,013210400015827373\t0,006256019144924136\t0,0008907296790385082\t0,0026050720957714307\t0,0\t0,0008975104259119235\t0,0002859887873435967\t0,003241693613661615\t0,0\t0,008105379902853227\t0,006808559431395831\t0,0\t\nCs137\t0.0\t8.75678358053951\t34.52423732216553\t0,40506409873035404\t0,579306333715551\t0,19268867552532926\t0,07453867879885771\t1,6318720769413315\t12,698961044953135\t1,281649059374121\t4,931294574096849\t6,834235050148761\t4,3543912201942145\t7,0581057779773415\t34,52423732216553\t6,957915937101751\t23,83223601141241\t0,4434723235202556\t0,5167820449704669\t0,0\t0,9159924687104889\t0,7856214463556102\t0,14679044401501226\t15,008860782660086\t11,084358295277546\t10,088303008437679\t28,437981177905865\t30,011116453359186\t12,030358025382531\t15,869135465137141\t4,2669528801015115\t18,633851659258806\t9,991181471379539\t8,078753276607124\t15,833352377352636\t0,0\t18,72709044840742\t0,26097540890838067\t\nBa133\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nCe144\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nEu152\t0.0\t0.005238176989567671\t0.13186603153913679\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,13186603153913679\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,051470163095731686\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nEu154\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nEu155\t0.0\t0.0020257777415478503\t0.04422803303464835\t0,04422803303464835\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,010557566686679482\t0,0\t0,0\t0,0\t0,0\t0,0\t0,016116621232846937\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nFe55\t0.781743244383831\t2.829267089492853\t5.441179844790479\t1,1387548221420651\t2,295916404921135\t1,1534352856941374\t0,9116100176194533\t2,544299424864772\t3,194322953247046\t1,1714108523434577\t1,2577849823222127\t3,2538429481315303\t4,576898563207034\t3,145991454052209\t2,3635073116971075\t3,529553037750978\t5,121966024967227\t4,098814923633702\t3,3522785861800415\t4,711132536625655\t3,334074815112633\t5,441179844790479\t3,1646319209649345\t2,6884549278107865\t3,9248674855209735\t3,040575519779621\t2,1290958835978477\t2,525413446515435\t1,913350616821849\t2,2804115190025067\t1,7896182842826105\t1,4791422108078904\t2,7890265693363916\t3,72327822186565\t4,279365968273485\t2,3197618911286204\t3,5988356328545428\t0,781743244383831\t\nNi63\t28.310796751985514\t66.50382127743575\t96.14986969796743\t28,310796751985514\t35,8742621525445\t89,66845562946635\t90,87961536478909\t78,46986193580516\t71,992600578534\t76,75240265545153\t77,5031252120335\t71,75289814028785\t74,65128238045786\t74,56369731260534\t36,74659932893875\t75,69712375137271\t52,35013076958196\t82,02456173572381\t79,23574617170588\t62,32312873752175\t74,38592596400643\t57,8653899872605\t79,15513793324432\t65,02672554859026\t66,45623105101834\t70,58993331066475\t43,13267649605655\t52,18617364452386\t67,29872825415728\t65,67552111621046\t81,54230160869828\t70,14247816625351\t71,84144974652484\t54,91600808881712\t30,55632978173785\t70,57703721020296\t51,33953849551115\t96,14986969796743\t\nSr90\t0.0\t0.1976483240046535\t0.888147132202313\t0,2929172022365912\t0,29770991040673983\t0,0037473718120986503\t0,003140829682945882\t0,015231809168531469\t0,1534984618563907\t0,06583181360917273\t0,3260264175536057\t0,442934938021829\t0,22224788957973912\t0,06862347360889315\t0,0\t0,21922676980164618\t0,034674876937686484\t0,10120320171184516\t0,007563859364724727\t0,012843101056407553\t0,1866033475265071\t0,12309719343200792\t0,012233207288349894\t0,0\t0,0\t0,0\t0,0\t0,5255295747895685\t0,6550027222307634\t0,8719903350010825\t0,5411127802474145\t0,24388408843296874\t0,888147132202313\t0,0\t0,30757178189897594\t0,04747997753809835\t0,24761727316597568\t0,0\t\nU234\t0.0\t0.0036689675478368293\t0.015867762993418518\t0,0\t0,004012619355498872\t0,0\t0,0\t0,0\t0,013313784217663674\t0,0027354772021765334\t0,0019126756415965335\t0,009219098682318965\t0,012330517230480991\t0,002957087971546037\t0,0\t0,01041701346459033\t0,0068747129937264465\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,014001982160388587\t0,006700838441566498\t0,003427365567096464\t0,002316187719285336\t0,005535342804727058\t0,0\t0,015867762993418518\t0,013158007661057193\t0,0036333900671509946\t0,0\t\nU238\t0.0\t0.0031742991893523895\t0.015854463353871726\t0,0\t0,00535047598255859\t0,0\t0,0\t0,0\t0,005547738657058879\t0,0031264447513794117\t0,0019127888973534733\t0,005531787861698124\t0,015854463353871726\t0,0033797291970304876\t0,0\t0,009375867843219435\t0,002750047877705069\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,014002811698214017\t0,006701236520654961\t0,00342756861901775\t0,004053568456598574\t0,004151752863344538\t0,0\t0,011773553797869074\t0,010527029840279629\t0,0036336054094798917\t0,0\t\nU235\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nPu239Pu240\t0.0\t0.10005993320053111\t0.4707790835234286\t0,4325672825025199\t0,18952229111240754\t0,0\t0,011193693093612327\t0,046295929900318236\t0,034319984546493765\t0,05693160205465657\t0,4707790835234286\t0,06623432902252391\t0,03691182050780996\t0,009273728454759178\t0,0\t0,08315676755339434\t0,02743979029978535\t0,1387114493306161\t0,0\t0,0\t0,23905374841849295\t0,21430716529262203\t0,01859465383729924\t0,0\t0,0\t0,0\t0,0\t0,051182319815728496\t0,20957798279755288\t0,2563114669661638\t0,03548243464842912\t0,04622419561677288\t0,3866412392588445\t0,0\t0,2758117542201568\t0,023633464692743963\t0,08459667993609245\t0,0573428046153645\t\nPu238\t0.0\t0.06003830268262319\t0.3572053132871847\t0,3572053132871847\t0,26990293170933094\t0,0\t0,00951864699437414\t0,03219033665058935\t0,031041932280314228\t0,04771339072089889\t0,2892059253440818\t0,04374873658158403\t0,026872072526066874\t0,008238284191263214\t0,0\t0,07947744473425865\t0,030314961635844004\t0,04680132959209764\t0,0\t0,0\t0,11950319569262607\t0,16556818546964466\t0,018674278261808654\t0,0\t0,0\t0,0\t0,0\t0,02045489005876174\t0,07254465949747875\t0,07571227656259043\t0,027967710405196366\t0,027004029762526714\t0,06649122320505493\t0,0\t0,11283205609767648\t0,02007931949587788\t0,06981797362060281\t0,0324594895140778\t\nPu241\t0.0\t1.0026626878479006\t4.465693237784866\t0,7021911449381334\t3,761627741601715\t0,07745443029942466\t0,16784646565697095\t0,5983517096054464\t0,503068875460581\t1,2579837701760423\t4,465693237784866\t1,008139726666064\t0,3219404983361339\t0,6165899002503571\t0,0\t0,9134743174466508\t0,5738393772813927\t0,830344348529407\t0,09167428512392581\t0,054480618685745705\t2,574434726310292\t3,323775347240344\t0,4761238014989793\t0,0\t0,0\t0,0\t0,0\t0,8040709999526388\t1,9024536637489537\t2,581281894763555\t0,5168390712564837\t0,6027130716273664\t2,0757878418539817\t0,0\t2,6200541811064664\t0,30781075766919636\t0,9294139980496705\t0,43373427175573853\t\nAm241\t0.0\t0.18363439930678485\t0.6412769009390047\t0,5973942792556156\t0,5156970122215593\t0,004352656820997438\t0,030823711743899928\t0,07879998119319823\t0,10692867454524035\t0,22502524679730598\t0,6412769009390047\t0,15170011437845968\t0,07110798872591348\t0,0675846075059422\t0,0\t0,17269072078065434\t0,08443508985944145\t0,14914546337968282\t0,005184661593827539\t0,0030811647009421775\t0,431756818444744\t0,39183865177986227\t0,06478006035463296\t0,0\t0,0\t0,0\t0,0\t0,15954654514170374\t0,4237609314287699\t0,5356775243166437\t0,11215023579155951\t0,1153102927889177\t0,4614278112928681\t0,0\t0,4954385666932758\t0,0581647803762395\t0,16982118719957576\t0,10230229568699123\t\nCm242\t0.0\t1.7736879320419285e-18\t4.613445642416072e-17\t0,0\t4,613445642416072e-17\t0,0\t0,0\t0,0\t0,0\t8,794390156295911e-18\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t1,4004458953091695e-18\t0,0\t0,0\t0,0\t0,0\t0,0\t3,499870389755363e-18\t0,0\t2,2499147559463276e-18\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nCm244\t0.0\t0.027771189766833224\t0.2686930838009948\t0,1449487080648684\t0,2686930838009948\t0,0\t0,0012580038116454958\t0,015603655797796979\t0,016951022616382035\t0,027753993142651458\t0,053012659676894516\t0,01983506037885342\t0,014221087494108376\t0,009475455151137391\t0,0\t0,06081491066116751\t0,02776754355836166\t0,019527579323307096\t0,0\t0,0\t0,050581284770802044\t0,046104534175439485\t0,0037248462936088625\t0,0\t0,0\t0,0\t0,0\t0,010834044630795818\t0,020619335758234953\t0,02007574322511735\t0,01730357254612346\t0,007796316424248097\t0,022810501225722514\t0,0\t0,03679808134821565\t0,007093024955431814\t0,03807657200263946\t0,010311021004614233\t\nNi59\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nH3\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\nU233\t0.0\t0.0\t0.0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t0,0\t\n"

  # global rel_nuclides3 = [Constraint("Co60", "NONE", 0, 1)]
  @pending copy2clipboard_decay("2016", true) --> "2016\n\tMin\tMittel\tMax\t11\t12\t13\t14\t16\t17\t18\t19\t21\t23\t22\t24\t25\t27\t28\t26\t29\t30\t32\t33\t34\t35\t36\t37\t38\t40\t42\t39\t43\t44\t45\t46\t47\t51\t52\t\nCo60\t2.1712617295213237\t19.288605626538626\t65.7039947184108\t65,7039947184108\t54,85363296361967\t8,743196180071404\t7,805012890492373\t16,26317518818438\t9,025811675817362\t10,02366705999635\t8,991205022149124\t16,04157037413482\t15,694871002024074\t14,357329128228486\t26,357150253702923\t11,985037669518078\t17,406881863554762\t11,93693640926884\t13,25995642815342\t32,20598700567066\t17,388087963152916\t31,36808301094612\t16,31254413020229\t17,27595849828366\t18,530807744671566\t16,28118769947899\t26,287036042423907\t13,225805168247243\t10,30710666728621\t10,996991353820974\t9,323924958473519\t7,800475449912893\t10,94845950399595\t33,278718719096446\t43,9202348959487\t24,24798186326247\t24,781115697129195\t2,1712617295213237\t\n"
end

rel_nuclides3 = [Constraint("Co60", "NONE", 0, 0)
                 Constraint("Cs137", ">=", 5, 0)
                 Constraint("Ni63", "==", 10, 0)
                 Constraint("Am241", "<=", 0.3, 100)]

genSettings.target = "measure"
facts("calculations (with optimization target 'measure')") do
   @fact get_nv()[:,2016].array --> [0.0,90.0,10.0,0.0]
end

genSettings.target = "OF"
facts("calculations (with optimization target 'OF')") do
   @fact get_nv()[:,2016].array --> [85.0,5.0,10.0,0.0]
end

facts("check NV test") do

end

# make MILP :Infeasible
rel_nuclides3 = [Constraint("Co60", "==", 0, 0)
                 Constraint("Cs137", "<=", 5, 0)
                 Constraint("Ni63", "==", 10, 0)
                 Constraint("Am241", "==", 0.0, 100)]
facts("check infeasible problem") do
  @fact get_nv() .== 0 --> all
end

import Base.==
function ==(a::Constraint, b::Constraint)
  all([a.name == b.name,
  a.relation == b.relation,
  a.limit == b.limit,
  a.weight == b.weight])
end

rel_nuclides3 = Array(Constraint, 0)
facts("check constraints") do
  @fact get_rel_nuc("Co60", "NONE", "", "")[end] --> Constraint("Co60", "NONE", 0, 1)
  @fact get_rel_nuc("Cs137", "<=", "10.5", "100")[end] --> Constraint("Cs137", "<=", 10.5, 100)

  @fact rm_rel_nuc("Co60") --> [Constraint("Cs137", "<=", 10.5, 100)]
  @fact get_relation("Cs137", ">=") --> ">="
  @fact get_limit("Cs137", "5.25") --> 5.25
  @fact get_weight("Cs137", "0") --> 0
end


facts("check decay in GUI") do
 @fact decay_gui("2016", false)[3].values --> roughly([2.17126,19.2886,65.704,65.704,54.8536,8.7432,7.80501,16.2632,9.02581,10.0237,8.99121,16.0416,15.6949,14.3573,26.3572,11.985,17.4069,11.9369,13.26,32.206,17.3881,31.3681,16.3125,17.276,18.5308,16.2812,26.287,13.2258,10.3071,10.997,9.32392,7.80048,10.9485,33.2787,43.9202,24.248,24.7811,2.17126], atol=1E-3)

 @fact decay_gui("2016", true)[1].values --> roughly([0.0,8.75678,34.5242,0.405064,0.579306,0.192689,0.0745387,1.63187,12.699,1.28165,4.93129,6.83424,4.35439,7.05811,34.5242,6.95792,23.8322,0.443472,0.516782,0.0,0.915992,0.785621,0.14679,15.0089,11.0844,10.0883,28.438,30.0111,12.0304,15.8691,4.26695,18.6339,9.99118,8.07875,15.8334,0.0,18.7271,0.260975], atol=1E-3)
end

# workspace()
# using LastMain.FactCheck
# using LastMain.QML
# facts("check generation of global 'year'-variable if not defined")
#  update_year_ListModel()
# end


exitstatus()
